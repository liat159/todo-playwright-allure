{"name": "Verify task with special characters is added", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0xbafe43+66515]\n\tGetHandleVerifier [0x0xbafe84+66580]\n\t(No symbol) [0x0x99dc48]\n\t(No symbol) [0x0xa22872]\n\t(No symbol) [0x0x9e2e4b]\n\t(No symbol) [0x0x9e17b2]\n\t(No symbol) [0x0xa0b1cc]\n\t(No symbol) [0x0x9ddb74]\n\t(No symbol) [0x0xa0b384]\n\t(No symbol) [0x0xa2cba7]\n\t(No symbol) [0x0xa0afc6]\n\t(No symbol) [0x0x9dc2ca]\n\t(No symbol) [0x0x9dd154]\n\tGetHandleVerifier [0x0xe07353+2521315]\n\tGetHandleVerifier [0x0xe022d3+2500707]\n\tGetHandleVerifier [0x0xbd7c94+229924]\n\tGetHandleVerifier [0x0xbc81f8+165768]\n\tGetHandleVerifier [0x0xbcecad+193085]\n\tGetHandleVerifier [0x0xbb8158+100072]\n\tGetHandleVerifier [0x0xbb82f0+100480]\n\tGetHandleVerifier [0x0xba25aa+11066]\n\tBaseThreadInitThunk [0x0x76ba5d49+25]\n\tRtlInitializeExceptionChain [0x0x7753d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7753d661+561]", "trace": "self = <test_todo_app_extended.TestTodoAppExtended object at 0x00000184CA76B6F0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"beb7553400e1403adecb861d80b23dc6\")>\nconfig = {'base_url': 'https://demo.playwright.dev/todomvc/', 'browser': 'chrome', 'implicit_wait': 5}\n\n    @allure.story(\"Special Characters\")\n    @allure.title(\"Verify task with special characters is added\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_special_characters_task(self, browser, config):\n        page = TodoPage(browser)\n        page.load(config[\"base_url\"])\n    \n        special_task = \"@!#$$%^&*()_+{}[]:;\\\"'<>,.?/ðŸš€\"\n>       page.add_task(special_task)\n\ntests\\test_todo_app_extended.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\todo_page.py:39: in add_task\n    input_field.send_keys(task_text + Keys.RETURN)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:303: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000184CA87CC50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: ChromeDriver only supports chara...]\\\\n\\\\tRtlInitializeExceptionChain [0x0x7753d6db+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x7753d661+561]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0xbafe43+66515]\nE       \tGetHandleVerifier [0x0xbafe84+66580]\nE       \t(No symbol) [0x0x99dc48]\nE       \t(No symbol) [0x0xa22872]\nE       \t(No symbol) [0x0x9e2e4b]\nE       \t(No symbol) [0x0x9e17b2]\nE       \t(No symbol) [0x0xa0b1cc]\nE       \t(No symbol) [0x0x9ddb74]\nE       \t(No symbol) [0x0xa0b384]\nE       \t(No symbol) [0x0xa2cba7]\nE       \t(No symbol) [0x0xa0afc6]\nE       \t(No symbol) [0x0x9dc2ca]\nE       \t(No symbol) [0x0x9dd154]\nE       \tGetHandleVerifier [0x0xe07353+2521315]\nE       \tGetHandleVerifier [0x0xe022d3+2500707]\nE       \tGetHandleVerifier [0x0xbd7c94+229924]\nE       \tGetHandleVerifier [0x0xbc81f8+165768]\nE       \tGetHandleVerifier [0x0xbcecad+193085]\nE       \tGetHandleVerifier [0x0xbb8158+100072]\nE       \tGetHandleVerifier [0x0xbb82f0+100480]\nE       \tGetHandleVerifier [0x0xba25aa+11066]\nE       \tBaseThreadInitThunk [0x0x76ba5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x7753d6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x7753d661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "steps": [{"name": "Load TodoMVC page", "status": "passed", "parameters": [{"name": "url", "value": "'https://demo.playwright.dev/todomvc/'"}], "start": 1761303012646, "stop": 1761303014207}, {"name": "Add task: '@!#$$%^&*()_+{}[]:;\"'<>,.?/ðŸš€'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: ChromeDriver only supports characters in the BMP\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0xbafe43+66515]\n\tGetHandleVerifier [0x0xbafe84+66580]\n\t(No symbol) [0x0x99dc48]\n\t(No symbol) [0x0xa22872]\n\t(No symbol) [0x0x9e2e4b]\n\t(No symbol) [0x0x9e17b2]\n\t(No symbol) [0x0xa0b1cc]\n\t(No symbol) [0x0x9ddb74]\n\t(No symbol) [0x0xa0b384]\n\t(No symbol) [0x0xa2cba7]\n\t(No symbol) [0x0xa0afc6]\n\t(No symbol) [0x0x9dc2ca]\n\t(No symbol) [0x0x9dd154]\n\tGetHandleVerifier [0x0xe07353+2521315]\n\tGetHandleVerifier [0x0xe022d3+2500707]\n\tGetHandleVerifier [0x0xbd7c94+229924]\n\tGetHandleVerifier [0x0xbc81f8+165768]\n\tGetHandleVerifier [0x0xbcecad+193085]\n\tGetHandleVerifier [0x0xbb8158+100072]\n\tGetHandleVerifier [0x0xbb82f0+100480]\n\tGetHandleVerifier [0x0xba25aa+11066]\n\tBaseThreadInitThunk [0x0x76ba5d49+25]\n\tRtlInitializeExceptionChain [0x0x7753d6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x7753d661+561]\n\n", "trace": "  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\pages\\todo_page.py\", line 39, in add_task\n    input_field.send_keys(task_text + Keys.RETURN)\n    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 303, in send_keys\n    self._execute(\n    ~~~~~~~~~~~~~^\n        Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\PC\\PycharmProjects\\todoMVCProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Get all tasks", "status": "passed", "start": 1761303014208, "stop": 1761303019233}], "parameters": [{"name": "task_text", "value": "'@!#$$%^&*()_+{}[]:;\"'<>,.?/ðŸš€'"}], "start": 1761303014207, "stop": 1761303019292}], "attachments": [{"name": "Failure Screenshot", "source": "cf67f1ee-0ce3-4dec-b063-06026a943c11-attachment.png", "type": "image/png"}], "start": 1761303012646, "stop": 1761303019310, "uuid": "6df4ceb0-7c4c-4247-9f4c-fb6d0b671f3d", "historyId": "59fb74c2b5c1c39d019f2c116ed932c2", "testCaseId": "59fb74c2b5c1c39d019f2c116ed932c2", "fullName": "tests.test_todo_app_extended.TestTodoAppExtended#test_special_characters_task", "labels": [{"name": "feature", "value": "Todo App - Extended Scenarios"}, {"name": "severity", "value": "normal"}, {"name": "story", "value": "Special Characters"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_todo_app_extended"}, {"name": "subSuite", "value": "TestTodoAppExtended"}, {"name": "host", "value": "DESKTOP-VE99VBG"}, {"name": "thread", "value": "10788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_todo_app_extended"}], "titlePath": ["tests", "test_todo_app_extended.py", "TestTodoAppExtended"]}